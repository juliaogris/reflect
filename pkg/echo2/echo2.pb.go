// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.8
// source: echo2/echo2.proto

package echo2

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ColorType int32

const (
	ColorType_RED   ColorType = 0
	ColorType_BLUE  ColorType = 1
	ColorType_GREEN ColorType = 2
)

// Enum value maps for ColorType.
var (
	ColorType_name = map[int32]string{
		0: "RED",
		1: "BLUE",
		2: "GREEN",
	}
	ColorType_value = map[string]int32{
		"RED":   0,
		"BLUE":  1,
		"GREEN": 2,
	}
)

func (x ColorType) Enum() *ColorType {
	p := new(ColorType)
	*p = x
	return p
}

func (x ColorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColorType) Descriptor() protoreflect.EnumDescriptor {
	return file_echo2_echo2_proto_enumTypes[0].Descriptor()
}

func (ColorType) Type() protoreflect.EnumType {
	return &file_echo2_echo2_proto_enumTypes[0]
}

func (x ColorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ColorType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ColorType(num)
	return nil
}

// Deprecated: Use ColorType.Descriptor instead.
func (ColorType) EnumDescriptor() ([]byte, []int) {
	return file_echo2_echo2_proto_rawDescGZIP(), []int{0}
}

type HelloRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message     *string  `protobuf:"bytes,1,req,name=message" json:"message,omitempty"`
	MoreDetails *Details `protobuf:"bytes,2,opt,name=more_details,json=moreDetails" json:"more_details,omitempty"`
}

func (x *HelloRequest) Reset() {
	*x = HelloRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_echo2_echo2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloRequest) ProtoMessage() {}

func (x *HelloRequest) ProtoReflect() protoreflect.Message {
	mi := &file_echo2_echo2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloRequest.ProtoReflect.Descriptor instead.
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return file_echo2_echo2_proto_rawDescGZIP(), []int{0}
}

func (x *HelloRequest) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *HelloRequest) GetMoreDetails() *Details {
	if x != nil {
		return x.MoreDetails
	}
	return nil
}

type HelloResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RobotResponse *string `protobuf:"bytes,1,req,name=robot_response,json=robotResponse" json:"robot_response,omitempty"`
}

func (x *HelloResponse) Reset() {
	*x = HelloResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_echo2_echo2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloResponse) ProtoMessage() {}

func (x *HelloResponse) ProtoReflect() protoreflect.Message {
	mi := &file_echo2_echo2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloResponse.ProtoReflect.Descriptor instead.
func (*HelloResponse) Descriptor() ([]byte, []int) {
	return file_echo2_echo2_proto_rawDescGZIP(), []int{1}
}

func (x *HelloResponse) GetRobotResponse() string {
	if x != nil && x.RobotResponse != nil {
		return *x.RobotResponse
	}
	return ""
}

type Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabelCount    map[string]int64 `protobuf:"bytes,1,rep,name=label_count,json=labelCount" json:"label_count,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	ColorType     *ColorType       `protobuf:"varint,2,req,name=color_type,json=colorType,enum=echo2.ColorType" json:"color_type,omitempty"`
	Any           *anypb.Any       `protobuf:"bytes,3,req,name=any" json:"any,omitempty"`
	Notifications []*Notification  `protobuf:"bytes,4,rep,name=notifications" json:"notifications,omitempty"`
	AInt32        *int32           `protobuf:"varint,5,opt,name=a_int32,json=aInt32" json:"a_int32,omitempty"`
	AUint32       *uint32          `protobuf:"varint,6,opt,name=a_uint32,json=aUint32" json:"a_uint32,omitempty"`
	AInt64        *int64           `protobuf:"varint,7,opt,name=a_int64,json=aInt64" json:"a_int64,omitempty"`
	AUint64       *uint64          `protobuf:"varint,8,opt,name=a_uint64,json=aUint64" json:"a_uint64,omitempty"`
	ABool         *bool            `protobuf:"varint,9,opt,name=a_bool,json=aBool" json:"a_bool,omitempty"`
	ASint32       *int32           `protobuf:"zigzag32,10,opt,name=a_sint32,json=aSint32" json:"a_sint32,omitempty"`
	ASint64       *int64           `protobuf:"zigzag64,11,opt,name=a_sint64,json=aSint64" json:"a_sint64,omitempty"`
	AString       *string          `protobuf:"bytes,12,opt,name=a_string,json=aString" json:"a_string,omitempty"`
	ABytes        []byte           `protobuf:"bytes,13,opt,name=a_bytes,json=aBytes" json:"a_bytes,omitempty"`
	AFixed32      *uint32          `protobuf:"fixed32,14,opt,name=a_fixed32,json=aFixed32" json:"a_fixed32,omitempty"`
	ASfixed32     *int32           `protobuf:"fixed32,15,opt,name=a_sfixed32,json=aSfixed32" json:"a_sfixed32,omitempty"`
	AFixed64      *uint64          `protobuf:"fixed64,16,opt,name=a_fixed64,json=aFixed64" json:"a_fixed64,omitempty"`
	ASfixed64     *int64           `protobuf:"fixed64,17,opt,name=a_sfixed64,json=aSfixed64" json:"a_sfixed64,omitempty"`
}

func (x *Details) Reset() {
	*x = Details{}
	if protoimpl.UnsafeEnabled {
		mi := &file_echo2_echo2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Details) ProtoMessage() {}

func (x *Details) ProtoReflect() protoreflect.Message {
	mi := &file_echo2_echo2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Details.ProtoReflect.Descriptor instead.
func (*Details) Descriptor() ([]byte, []int) {
	return file_echo2_echo2_proto_rawDescGZIP(), []int{2}
}

func (x *Details) GetLabelCount() map[string]int64 {
	if x != nil {
		return x.LabelCount
	}
	return nil
}

func (x *Details) GetColorType() ColorType {
	if x != nil && x.ColorType != nil {
		return *x.ColorType
	}
	return ColorType_RED
}

func (x *Details) GetAny() *anypb.Any {
	if x != nil {
		return x.Any
	}
	return nil
}

func (x *Details) GetNotifications() []*Notification {
	if x != nil {
		return x.Notifications
	}
	return nil
}

func (x *Details) GetAInt32() int32 {
	if x != nil && x.AInt32 != nil {
		return *x.AInt32
	}
	return 0
}

func (x *Details) GetAUint32() uint32 {
	if x != nil && x.AUint32 != nil {
		return *x.AUint32
	}
	return 0
}

func (x *Details) GetAInt64() int64 {
	if x != nil && x.AInt64 != nil {
		return *x.AInt64
	}
	return 0
}

func (x *Details) GetAUint64() uint64 {
	if x != nil && x.AUint64 != nil {
		return *x.AUint64
	}
	return 0
}

func (x *Details) GetABool() bool {
	if x != nil && x.ABool != nil {
		return *x.ABool
	}
	return false
}

func (x *Details) GetASint32() int32 {
	if x != nil && x.ASint32 != nil {
		return *x.ASint32
	}
	return 0
}

func (x *Details) GetASint64() int64 {
	if x != nil && x.ASint64 != nil {
		return *x.ASint64
	}
	return 0
}

func (x *Details) GetAString() string {
	if x != nil && x.AString != nil {
		return *x.AString
	}
	return ""
}

func (x *Details) GetABytes() []byte {
	if x != nil {
		return x.ABytes
	}
	return nil
}

func (x *Details) GetAFixed32() uint32 {
	if x != nil && x.AFixed32 != nil {
		return *x.AFixed32
	}
	return 0
}

func (x *Details) GetASfixed32() int32 {
	if x != nil && x.ASfixed32 != nil {
		return *x.ASfixed32
	}
	return 0
}

func (x *Details) GetAFixed64() uint64 {
	if x != nil && x.AFixed64 != nil {
		return *x.AFixed64
	}
	return 0
}

func (x *Details) GetASfixed64() int64 {
	if x != nil && x.ASfixed64 != nil {
		return *x.ASfixed64
	}
	return 0
}

type Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *int32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// Types that are assignable to Instrument:
	//	*Notification_Private
	//	*Notification_Public
	Instrument isNotification_Instrument `protobuf_oneof:"instrument"`
}

func (x *Notification) Reset() {
	*x = Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_echo2_echo2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification) ProtoMessage() {}

func (x *Notification) ProtoReflect() protoreflect.Message {
	mi := &file_echo2_echo2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification.ProtoReflect.Descriptor instead.
func (*Notification) Descriptor() ([]byte, []int) {
	return file_echo2_echo2_proto_rawDescGZIP(), []int{3}
}

func (x *Notification) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (m *Notification) GetInstrument() isNotification_Instrument {
	if m != nil {
		return m.Instrument
	}
	return nil
}

func (x *Notification) GetPrivate() *PrivateNotification {
	if x, ok := x.GetInstrument().(*Notification_Private); ok {
		return x.Private
	}
	return nil
}

func (x *Notification) GetPublic() *PublicNotification {
	if x, ok := x.GetInstrument().(*Notification_Public); ok {
		return x.Public
	}
	return nil
}

type isNotification_Instrument interface {
	isNotification_Instrument()
}

type Notification_Private struct {
	Private *PrivateNotification `protobuf:"bytes,2,opt,name=private,oneof"`
}

type Notification_Public struct {
	Public *PublicNotification `protobuf:"bytes,3,opt,name=public,oneof"`
}

func (*Notification_Private) isNotification_Instrument() {}

func (*Notification_Public) isNotification_Instrument() {}

type PrivateNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretContent *string `protobuf:"bytes,1,req,name=secret_content,json=secretContent" json:"secret_content,omitempty"`
}

func (x *PrivateNotification) Reset() {
	*x = PrivateNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_echo2_echo2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateNotification) ProtoMessage() {}

func (x *PrivateNotification) ProtoReflect() protoreflect.Message {
	mi := &file_echo2_echo2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateNotification.ProtoReflect.Descriptor instead.
func (*PrivateNotification) Descriptor() ([]byte, []int) {
	return file_echo2_echo2_proto_rawDescGZIP(), []int{4}
}

func (x *PrivateNotification) GetSecretContent() string {
	if x != nil && x.SecretContent != nil {
		return *x.SecretContent
	}
	return ""
}

type PublicNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content *string `protobuf:"bytes,1,req,name=content" json:"content,omitempty"`
}

func (x *PublicNotification) Reset() {
	*x = PublicNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_echo2_echo2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicNotification) ProtoMessage() {}

func (x *PublicNotification) ProtoReflect() protoreflect.Message {
	mi := &file_echo2_echo2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicNotification.ProtoReflect.Descriptor instead.
func (*PublicNotification) Descriptor() ([]byte, []int) {
	return file_echo2_echo2_proto_rawDescGZIP(), []int{5}
}

func (x *PublicNotification) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

var File_echo2_echo2_proto protoreflect.FileDescriptor

var file_echo2_echo2_proto_rawDesc = []byte{
	0x0a, 0x11, 0x65, 0x63, 0x68, 0x6f, 0x32, 0x2f, 0x65, 0x63, 0x68, 0x6f, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x65, 0x63, 0x68, 0x6f, 0x32, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x5b, 0x0a, 0x0c, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a,
	0x0c, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x32, 0x2e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x0b, 0x6d, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x22, 0x36, 0x0a, 0x0d, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x6f, 0x62, 0x6f, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfe, 0x04, 0x0a, 0x07, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x63, 0x68, 0x6f,
	0x32, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x65, 0x63, 0x68, 0x6f,
	0x32, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x12, 0x39,
	0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x32, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x5f, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x17, 0x0a,
	0x07, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x61, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x61, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x5f, 0x73, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x61, 0x53, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x12, 0x52, 0x07, 0x61, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x61, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x61, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0f, 0x52, 0x09, 0x61, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x08, 0x61, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x11, 0x20, 0x01, 0x28, 0x10, 0x52,
	0x09, 0x61, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x1a, 0x3d, 0x0a, 0x0f, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x99, 0x01, 0x0a, 0x0c, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x63,
	0x68, 0x6f, 0x32, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x32, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x42, 0x0c, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x3c, 0x0a, 0x13, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0x2e, 0x0a, 0x12, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2a, 0x29, 0x0a, 0x09, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x07, 0x0a, 0x03, 0x52, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4c, 0x55,
	0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x02, 0x32, 0xaf,
	0x01, 0x0a, 0x04, 0x45, 0x63, 0x68, 0x6f, 0x12, 0x4e, 0x0a, 0x05, 0x48, 0x65, 0x6c, 0x6c, 0x6f,
	0x12, 0x13, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x32, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x32, 0x2e, 0x48, 0x65,
	0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x63, 0x68, 0x6f, 0x2f, 0x68,
	0x65, 0x6c, 0x6c, 0x6f, 0x3a, 0x01, 0x2a, 0x12, 0x57, 0x0a, 0x0b, 0x48, 0x65, 0x6c, 0x6c, 0x6f,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x13, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x32, 0x2e, 0x48,
	0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x65, 0x63,
	0x68, 0x6f, 0x32, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x65, 0x63, 0x68, 0x6f, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x3a, 0x01, 0x2a, 0x30, 0x01,
	0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a,
	0x75, 0x6c, 0x69, 0x61, 0x6f, 0x67, 0x72, 0x69, 0x73, 0x2f, 0x67, 0x75, 0x70, 0x70, 0x79, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x65, 0x63, 0x68, 0x6f, 0x32,
}

var (
	file_echo2_echo2_proto_rawDescOnce sync.Once
	file_echo2_echo2_proto_rawDescData = file_echo2_echo2_proto_rawDesc
)

func file_echo2_echo2_proto_rawDescGZIP() []byte {
	file_echo2_echo2_proto_rawDescOnce.Do(func() {
		file_echo2_echo2_proto_rawDescData = protoimpl.X.CompressGZIP(file_echo2_echo2_proto_rawDescData)
	})
	return file_echo2_echo2_proto_rawDescData
}

var file_echo2_echo2_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_echo2_echo2_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_echo2_echo2_proto_goTypes = []interface{}{
	(ColorType)(0),              // 0: echo2.ColorType
	(*HelloRequest)(nil),        // 1: echo2.HelloRequest
	(*HelloResponse)(nil),       // 2: echo2.HelloResponse
	(*Details)(nil),             // 3: echo2.Details
	(*Notification)(nil),        // 4: echo2.Notification
	(*PrivateNotification)(nil), // 5: echo2.PrivateNotification
	(*PublicNotification)(nil),  // 6: echo2.PublicNotification
	nil,                         // 7: echo2.Details.LabelCountEntry
	(*anypb.Any)(nil),           // 8: google.protobuf.Any
}
var file_echo2_echo2_proto_depIdxs = []int32{
	3, // 0: echo2.HelloRequest.more_details:type_name -> echo2.Details
	7, // 1: echo2.Details.label_count:type_name -> echo2.Details.LabelCountEntry
	0, // 2: echo2.Details.color_type:type_name -> echo2.ColorType
	8, // 3: echo2.Details.any:type_name -> google.protobuf.Any
	4, // 4: echo2.Details.notifications:type_name -> echo2.Notification
	5, // 5: echo2.Notification.private:type_name -> echo2.PrivateNotification
	6, // 6: echo2.Notification.public:type_name -> echo2.PublicNotification
	1, // 7: echo2.Echo.Hello:input_type -> echo2.HelloRequest
	1, // 8: echo2.Echo.HelloStream:input_type -> echo2.HelloRequest
	2, // 9: echo2.Echo.Hello:output_type -> echo2.HelloResponse
	2, // 10: echo2.Echo.HelloStream:output_type -> echo2.HelloResponse
	9, // [9:11] is the sub-list for method output_type
	7, // [7:9] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_echo2_echo2_proto_init() }
func file_echo2_echo2_proto_init() {
	if File_echo2_echo2_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_echo2_echo2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_echo2_echo2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_echo2_echo2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Details); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_echo2_echo2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_echo2_echo2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_echo2_echo2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_echo2_echo2_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Notification_Private)(nil),
		(*Notification_Public)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_echo2_echo2_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_echo2_echo2_proto_goTypes,
		DependencyIndexes: file_echo2_echo2_proto_depIdxs,
		EnumInfos:         file_echo2_echo2_proto_enumTypes,
		MessageInfos:      file_echo2_echo2_proto_msgTypes,
	}.Build()
	File_echo2_echo2_proto = out.File
	file_echo2_echo2_proto_rawDesc = nil
	file_echo2_echo2_proto_goTypes = nil
	file_echo2_echo2_proto_depIdxs = nil
}
